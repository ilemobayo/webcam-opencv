// NyARMarkersBehavior.java// Andrew Davison, ad@fivedots.coe.psu.ac.th, July 2013/* A time-based triggered behaviour which uses a detector to   update the position of model drawn above markers.*/import java.io.*;import java.awt.image.*;import java.util.*;import javax.media.j3d.*;import javax.vecmath.*;import jp.nyatla.nyartoolkit.utils.j2se.*;import jp.nyatla.nyartoolkit.core.*;import jp.nyatla.nyartoolkit.core.param.NyARParam;import jp.nyatla.nyartoolkit.detector.*;import jp.nyatla.nyartoolkit.core.types.*;import com.googlecode.javacv.*;import com.googlecode.javacv.cpp.*;import com.googlecode.javacv.cpp.videoInputLib.*;import static com.googlecode.javacv.cpp.opencv_core.*;import static com.googlecode.javacv.cpp.opencv_imgproc.*;import static com.googlecode.javacv.cpp.opencv_highgui.*;import static com.googlecode.javacv.cpp.avutil.*;   // for grabber/recorder constantspublic class NyARMarkersBehavior extends Behavior{  /* dimensions of each image; the panel is the same size as the image */  private static final int WIDTH = 640;    private static final int HEIGHT = 480;  private static final int CAMERA_ID = 0;  private final double FPS = 30.0;  private FrameGrabber grabber;  private NyARBufferedImageRaster raster;  private ImageComponent2D imc2d;  private DetectMarkers detectMarkers;   // the detector for the markers  private Background bg;  private WakeupCondition wakeup;  private boolean cameraStopped = false;  public NyARMarkersBehavior(Background bg, DetectMarkers ms)  {    super();    this.bg = bg;    detectMarkers = ms;    wakeup = new WakeupOnElapsedTime((int)(1000.0/FPS));    setSchedulingBounds( new BoundingSphere(new Point3d(), 100.0) );    grabber = initGrabber(CAMERA_ID);    BufferedImage im = (picGrab(grabber, CAMERA_ID)).getBufferedImage();    try {      raster = new NyARBufferedImageRaster(im);       imc2d = new ImageComponent2D(ImageComponent2D.FORMAT_RGB, im, true, false);      imc2d.setCapability(ImageComponent.ALLOW_IMAGE_WRITE);    }    catch(NyARException e)    {  System.out.println(e);       System.exit(1);    }  }  // end of NyARMarkersBehavior()  private FrameGrabber initGrabber(int ID)  {    FrameGrabber grabber = null;    System.out.println("Initializing grabber for " + videoInput.getDeviceName(ID) + " ...");    try {      grabber = FrameGrabber.createDefault(ID);      grabber.setFormat("dshow");       // using DirectShow      grabber.setImageWidth(WIDTH);     // default is too small: 320x240      grabber.setImageHeight(HEIGHT);      grabber.start();    }    catch(Exception e)     {  System.out.println("Could not start grabber");         System.out.println(e);       System.exit(1);    }    return grabber;  }  // end of initGrabber()  private IplImage picGrab(FrameGrabber grabber, int ID)  {    IplImage im = null;    try {      im = grabber.grab();  // take a snap    }    catch(Exception e)     {  System.out.println("Problem grabbing image for camera " + ID);  }    return im;  }  // end of picGrab()  public void stop()  {    try {      cameraStopped = true;      setEnable(false);      grabber.stop();      grabber.release();    }    catch(Exception e)     {  System.out.println("Problem stopping grabbing for camera " + CAMERA_ID);  }  }  public void initialize()  {  wakeupOn(wakeup);  }  public void processStimulus(Enumeration criteria)  /* use the detector to update the models on the markers */  {    if (cameraStopped)      return;    try {      BufferedImage im = (picGrab(grabber, CAMERA_ID)).getBufferedImage();      raster.wrapImage(im);      if (raster.hasBuffer()) {        if (bg != null) {          imc2d.set(im);          bg.setImage(imc2d);        }        detectMarkers.updateModels(raster);      }      wakeupOn(wakeup);    }    catch (Exception e) {      e.printStackTrace();    }  }  // end of processStimulus()}  // end of NyARMarkersBehavior class