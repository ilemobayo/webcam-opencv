
// QRCodex.java
// Andrew Davison, ad@fivedots.coe.psu.ac.th, March 2011

// Based on example code by Micha Kops at
// http://www.hascode.com/2010/05/playing-around-with-qr-codes/

/*  Methods for encoding and decoding QRCodes
       encode() :  string --> BufferedImage / image file
       decode() :  image file / BufferedImage / QRCODE_FNM --> QRCode result
    and
       examineResult() for printing details inside a Result object
*/


import java.io.File;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.util.*;

import com.google.zxing.*;
import com.google.zxing.client.j2se.*;
import com.google.zxing.common.*;
import com.google.zxing.qrcode.*;
import com.google.zxing.qrcode.decoder.*;
import com.google.zxing.client.result.*;

 
public class QRCodex 
{
  public static final String QRCODE_FNM = "qrCode.png";   // default QRCode image file
  private static final int IM_SIZE = 400;    // size of generated QRCode image
 

  // --------------------- encoding --------------------------------

/*
  public static void encode(String input) 
  {  encode(input, QRCODE_FNM);  }
*/


  public static void encode(String input, String fnm) 
  // encode the input string, and save the QRCode image inside the fnm file
  {
    BufferedImage im = encode(input);
    if (im != null)
      saveToFile(im, fnm);
  }  // end of encode() to file
 


  public static BufferedImage encode(String input) 
  // encode the input string as a QRCode image
  {
    System.out.println("Encoding \"" + input + "\" as QRCode...");


    // Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();
    // hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);  
                                        // request level change from L to M

    BitMatrix mtx = null;
    QRCodeWriter writer = new QRCodeWriter();
    try {
      mtx = writer.encode(input, BarcodeFormat.QR_CODE, IM_SIZE, IM_SIZE);
      // mtx = writer.encode(input, BarcodeFormat.QR_CODE, IM_SIZE, IM_SIZE, hints);
    }
    catch (WriterException e) {
      System.out.println("QRCode writer failed: " + e);
      return null;
    }
    if (mtx == null) {
      System.out.println("Generated byte matrix is null");
      return null;
    }

    BufferedImage image = MatrixToImageWriter.toBufferedImage(mtx);
    if (image == null)
      System.out.println("Generated image is null");
    return image;
  }  // end of encode() to image
 


  private static void saveToFile(BufferedImage im, String fnm)
  // save image into fnm file
  {
    try {
      ImageIO.write(im, "png", new File(fnm));
      System.out.println("Saved image to " + fnm);
    } 
    catch (IOException e) {
      System.out.println("Could not save image to " + fnm);
    }
  }  // end of saveToFile()


  // --------------------- decoding --------------------------------


  public static Result decode() 
  // decode the QRCode image in the QRCODE_FNM file, returning a Result object
  {  return decode(QRCODE_FNM);  }


  public static Result decode(String fnm) 
  // decode the QRCode image in the fnm file, returning a Result object
  {
    BufferedImage im = readFromFile(fnm);
    if (im != null)
      return decode(im);
    return null;
  }  // end of decode() of a file



  public static BufferedImage readFromFile(String fnm) 
  // read an image (a QRCode picture) from the fnm file
  {
    BufferedImage image = null;
    try {
      image = ImageIO.read(new File(fnm));
      System.out.println("Read QRCode from " + fnm);
    } 
    catch (IOException e) {
      System.out.println("Could not read image from " + fnm);
    }
    return image;
  }  // end of readFromFile()



  public static Result decode(BufferedImage image)
  // decode the QRCode image, returning a Result object
  {
    if (image == null) {
      System.out.println("Image is null");
      return null;
    }
 
    // creating luminance source
    LuminanceSource lumSource = new BufferedImageLuminanceSource(image);
    BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(lumSource));
 
    Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>();
    hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);  // try for accuracy, not speed

    Reader reader = new QRCodeReader();
    Result result = null;
    try {
      result = reader.decode(bitmap, hints);
    }
    catch (ReaderException e) {
      System.out.println("Could not decode image: " + e);
    }
    return result;
  }  // end of decode() of an image


  // --------------------------- examine QRCode result ---------------------

  public static void examineResult(Result res)
  /* prinr out Result information, including the barcode format (should be
     QRCode), result point coordinates, metadata, and parsed info.
  */
  {
    System.out.println("-------------- Examine result --------------");

    System.out.println("Barcode Format: " + res.getBarcodeFormat());

    ResultPoint[] pts = res.getResultPoints();
    if (pts.length == 0)
      System.out.println("No result points found");
    else {
      System.out.println("Result points:");
      for (int i=0; i < pts.length; i++)
        System.out.println("  " + i + ". " + pts[i]);
    }

    Hashtable mdata = res.getResultMetadata();
    if (mdata.size() == 0)
      System.out.println("No metadata found");
    else {
      System.out.println("Metadata:");
      Enumeration e = mdata.keys();
      int i=0;
      /* only the metadata keys are printed, apart from the the
         error correction level value */
      while( e.hasMoreElements() ){
        ResultMetadataType resMD = (ResultMetadataType) e.nextElement();
        System.out.println("  " + i + ". " + resMD);
        i++;
        if (resMD ==  ResultMetadataType.ERROR_CORRECTION_LEVEL)
          System.out.println("    Error Correction level: " + 
                  (String) mdata.get( ResultMetadataType.ERROR_CORRECTION_LEVEL ));
      }
    }

    ParsedResult parsedRes = ResultParser.parseResult(res);
    // System.out.println("Parsed result: \"" + parsedRes.getDisplayResult() + "\"");
    System.out.println("Message type: " + parsedRes.getType() );

    System.out.println("--------------");
  }  // end of examineResult()



  // ------------------------- test rig ---------------------

  public static void main(String[] args)
  {
    if (args.length != 1) {
      System.out.println("Usage: run QRCodex \"string\"");
      return;
    }
    QRCodex.encode(args[0], "test.png");   // encode the string, saving the barcode in the file
 
    // decode the barcode in the file
    Result res = QRCodex.decode("test.png");
    QRCodex.examineResult(res);
    System.out.println("Message: " + res.getText());
  }  // end of main()

}  // end of QRCodex class
